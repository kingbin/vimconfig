# from lencioni/dotfiles/.vim/UltiSnips

# global !p
# from snippet_helpers import *
# endglobal

# Loops

snippet for "for loop" !
for (let ${1:i} = 0, len = ${2:array}.length; $1 < len; $1++) {
	$0${2/([^.]+).*/$1/}[$1]
}
endsnippet

snippet fori "for...in" b
for (let ${1:prop} in ${2:Things}) {
	if ($2.hasOwnProperty($1)) {
		${0:let ${3:value} = $2[$1];}
	}
}
endsnippet

snippet foro "for...of" b
for (let ${1:value} of ${2:Things}) {
	${0:${VISUAL}}
}
endsnippet


# Conditionals

snippet if "if" b
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet eif "else if" !
else if (${1}) {
	${0:${VISUAL}}
}
endsnippet


# Switches

snippet sw "switch" b
switch (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet case "case" b
case ${1}:
	${0:${VISUAL}}
	break;
endsnippet


# Function

snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
	return " * @param {{}} {0}".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = "/**"
	for tag in tags:
		snip += tag
	snip += ' */'
	snip += ''
else:
	snip.rv = ''
`${1}(${2}) {
	${0:${VISUAL}}
},
endsnippet


# JSDoc

snippet /**
/**
 * ${0:${VISUAL}}
 */
endsnippet

snippet par "@param {...}"
@param {${1:type}} ${0:name description}
endsnippet

snippet ret "@return {...}"
@return {${1:type}} ${0}
endsnippet


# Misc

snippet fl "flow" b
/* @flow */
endsnippet

snippet cl "console.log(...)" b
console.log(${1:${VISUAL}});${0}
endsnippet

snippet re "require" b
const `!p
def formatVariableName(path):
	if path == 'react/addons':
		return 'React'

	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	elif lastPart == 'i18n':
		return 'I18n'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet me "module.exports" b
module.exports = ${1:`!p snip.rv = path_to_component_name(path, pascal_case_basename)`};$0
endsnippet

snippet memoizer "function that generate functions" b
  var memoizer = function (memo, fundamental){
    var shell = function(n){
      var result = memo[n];
      if(typeof result !== 'number'){
	result = fundamental(shell, n);
	memo[n] = result;
      }
      return result;
    }
    return shell;
  };
endsnippet


# React

snippet tsrcc "Create a React Component with typescript." b
import * as React from 'react'

export interface I${1:App}Props {
}

export default class ${1:} extends React.Component<I${1:}Props> {
  public render() {
    return (
      <div>
        ${2:}
      </div>
    )
  }
}
endsnippet

snippet clu "console.log(`[BLAZEK] $0: ${util.inspect($0, {colors:true, showHidden: true, depth: $1})}`)" b
console.log(\`[BLAZEK] $1: \${util.inspect($1, {colors:true, showHidden: true, depth: $2})}\`)
$0
endsnippet

snippet u "import util" b
import util from 'util'

$0
endsnippet



